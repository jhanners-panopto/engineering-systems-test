
repos:
    - name: auto-ci-test
      branches:
        - name: master
          merge-to:
            - hf.03

        - name: hf.02
          merge-to: rtd.01

        - name: hf.03
          merge-to: hf.04

        - name: rtd.01
          merge-to: hf.04

        - name: hf.04
          merge-to: rtd.02

text:

    integration_merge_comment: |
        # Manual merge conflict resolution required

        This is the integration pull request, merging from the pinned source branch `{pinned_source_branch_name}` to the integration branch `{integration_branch_name}`.

        ## Resolve merge conflicts locally

        Run the following commands locally to resolve merge conflicts.
        ```
        git fetch --all
        git checkout -B "{integration_branch_name}" "origin/{integration_branch_name}"
        git merge "origin/{pinned_source_branch_name}"
        git mergetool
        ```

        ## Build locally

        For `shuksan` branches and beyond:
        ```
        python.exe build_solution.py --clean --db-name LocalMergeConflictResolution
        ```
        For branches prior to `shuksan`:
        ```
        build_solution.bat
        ```

        ## Update the integration branch

        When local build passes and merge conflicts are resolved, push to the integration branch.
        ```
        git commit -m "Manually resolve conflicts for merge from {pinned_source_branch_name} to {integration_branch_name}"
        git push -u origin head
        ```

        Note that when all conflicts are resolved in the `{integration_branch_name}` branch, GitHub may automatically mark this pull request as "merged".

        # Finish

        No further action should be required.  Do not delete the integration branch; this will be cleaned up by the auto CI tool when it next runs.

        # References

        * [GitHub Automatic Continuous Integration](https://docs.google.com/document/d/1INwUhO40S7Owyb71zGcLbA0yWoXKXA_fJRSGQw1fQ3I/edit)

    final_merge_comment: |
        # Manual merge conflict resolution _may_ be required

        This is the final pull request, merging from the integration branch `{integration_branch_name}` to the destination branch `{destination_branch_name}`.

        Manual merge conflict resolution was required when merging from source branch `{pinned_source_branch_name}` to integration branch `{integration_branch_name}`.

        Out of an abundance of caution, we require that the final merge to `{destination_branch_name}` be performed manually.

        ## If manual merge conflict resolution _is not_ required

        Get the required number of reviewers to approve the pull request and manually merge it to the destination branch.

        ## If manual merge conflict resolution _is_ required

        ### Resolve merge conflicts locally

        Run the following commands locally to resolve merge conflicts.
        ```
        git fetch --all
        git checkout -B "{integration_branch_name}" "origin/{integration_branch_name}"
        git merge "origin/{destination_branch_name}"
        git mergetool
        ```

        ### Build locally

        For `shuksan` branches and beyond:
        ```
        python.exe build_solution.py --clean --db-name LocalMergeConflictResolution
        ```
        For branches prior to `shuksan`:
        ```
        build_solution.bat
        ```

        ### Update the integration branch

        When local build passes and merge conflicts are resolved, push to the integration branch.
        ```
        git commit -m "Manually resolve conflicts for merge from {integration_branch_name} to {destination_branch_name}"
        git push -u origin head
        ```

        After the integration branch has been updated, get the required number of reviewers to approve the pull request and manually merge it to the destination branch.

        # Finish

        No further action should be required.  Do not delete the integration branch; this will be cleaned up by the auto CI tool when it next runs.

        # References

        * [GitHub Automatic Continuous Integration](https://docs.google.com/document/d/1INwUhO40S7Owyb71zGcLbA0yWoXKXA_fJRSGQw1fQ3I/edit)

    commit_state_is_not_success: |
        # Manual investigation required

        Commit state on this pull request is `{commit_state}`. Review the pull request status and determine if this is a build or test failure.

        ## Build failures

        Fix the build break, then cancel this integration cycle.

        ## Test failures

        _Do not merge test failures forward unless there is a compelling business reason to do so._

        ### If you decide to merge the test failure forward

        Document in this PR why propagating the test failure is the desired choice, get the required number of reviewers to approve the pull request, then manually merge this pull request.

        No further action should be required.  Do not delete the integration branch; this will be cleaned up by the auto CI tool when it next runs.

        ### If you decide to not merge the test failure forward.

        Fix the test failure, then cancel this integration cycle.

        ## Transient build or test failures

        If this is a build or test failure due to some external event, e.g., network outage, queue a new buddy build for branch `{integration_branch_name}`.

        When that build completes and passes, the auto CI process should resume automatically.

        ## Canceling the integration cycle

        To cancel this integration cycle and have it automatically restart, run the following command:
        ```
        gtb-auto-ci --credentials <path to your credentials file> --action cancel --repo {repo_name} --source-branch {source_branch_name} --destination-branch {destination_branch_name}
        ```

        # References

        * [GitHub Automatic Continuous Integration](https://docs.google.com/document/d/1INwUhO40S7Owyb71zGcLbA0yWoXKXA_fJRSGQw1fQ3I/edit)
